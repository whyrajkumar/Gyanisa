// <auto-generated />
using Gyanisa.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace Gyanisa.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Gyanisa.Models.Admin.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LanguageCode")
                        .IsRequired();

                    b.Property<string>("LanguageName")
                        .IsRequired();

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords");

                    b.Property<string>("MetaTitle");

                    b.Property<string>("Metaabstract");

                    b.Property<string>("Slug");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Gyanisa.Models.Admin.TaughtLanguage", b =>
                {
                    b.Property<int>("UserID");

                    b.Property<int>("LanguageID");

                    b.HasKey("UserID", "LanguageID");

                    b.HasIndex("LanguageID");

                    b.ToTable("TaughtLanguages");
                });

            modelBuilder.Entity("Gyanisa.Models.Admin.TermAndService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Aboutus");

                    b.Property<string>("FAQ");

                    b.Property<string>("Guidelines");

                    b.Property<string>("Licenses");

                    b.Property<string>("PaymentRates");

                    b.Property<string>("PrivacyPolicy");

                    b.Property<string>("TermsCondition");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("TermAndServices");
                });

            modelBuilder.Entity("Gyanisa.Models.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Gyanisa.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Gyanisa.Models.Blog.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Image");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords");

                    b.Property<string>("MetaTitle");

                    b.Property<string>("Metaabstract");

                    b.Property<int>("PostGroupID");

                    b.Property<string>("Slug");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("PostGroupID");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Gyanisa.Models.Blog.PostGroup", b =>
                {
                    b.Property<int>("PostGroupID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Image");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords");

                    b.Property<string>("MetaTitle");

                    b.Property<string>("Metaabstract");

                    b.Property<string>("PostGroupCode");

                    b.Property<string>("PostGroupDescription");

                    b.Property<string>("PostGroupName");

                    b.Property<string>("Slug");

                    b.HasKey("PostGroupID");

                    b.ToTable("PostGroup");
                });

            modelBuilder.Entity("Gyanisa.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CourseCode")
                        .IsRequired();

                    b.Property<string>("CourseName")
                        .IsRequired();

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords");

                    b.Property<string>("MetaTitle");

                    b.Property<string>("Metaabstract");

                    b.Property<string>("Slug");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Gyanisa.Models.PostRequire", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Archive");

                    b.Property<bool>("Complete");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<string>("IP");

                    b.Property<string>("Mobile");

                    b.Property<string>("Subject");

                    b.Property<string>("Zip");

                    b.Property<DateTime>("date");

                    b.HasKey("Id");

                    b.ToTable("PostRequires");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PostRequire");
                });

            modelBuilder.Entity("Gyanisa.Models.RatingLogModel", b =>
                {
                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords");

                    b.Property<string>("MetaTitle");

                    b.Property<string>("Metaabstract");

                    b.Property<int>("SectionId");

                    b.Property<string>("Slug");

                    b.Property<int>("UserID");

                    b.Property<string>("UserName");

                    b.Property<int>("VoteForID");

                    b.HasKey("AutoId");

                    b.HasIndex("UserID");

                    b.ToTable("RatingLogModels");
                });

            modelBuilder.Entity("Gyanisa.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords");

                    b.Property<string>("MetaTitle");

                    b.Property<string>("Metaabstract");

                    b.Property<string>("Slug");

                    b.Property<int>("SubjectCategoryId");

                    b.Property<string>("SubjectCode")
                        .IsRequired();

                    b.Property<string>("SubjectName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("SubjectCategoryId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Gyanisa.Models.SubjectCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords");

                    b.Property<string>("MetaTitle");

                    b.Property<string>("Metaabstract");

                    b.Property<string>("Slug");

                    b.Property<string>("SubjectCategoryCode")
                        .IsRequired();

                    b.Property<string>("SubjectCategoryDescription");

                    b.Property<string>("SubjectCategoryName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("SubjectCategories");
                });

            modelBuilder.Entity("Gyanisa.Models.TutorCourse", b =>
                {
                    b.Property<int>("UserID");

                    b.Property<int>("CourseID");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords");

                    b.Property<string>("MetaTitle");

                    b.Property<string>("Metaabstract");

                    b.Property<string>("Slug");

                    b.HasKey("UserID", "CourseID");

                    b.HasIndex("CourseID");

                    b.ToTable("TutorCourses");
                });

            modelBuilder.Entity("Gyanisa.Models.TutorSubject", b =>
                {
                    b.Property<int>("UserID");

                    b.Property<int>("SubjectId");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords");

                    b.Property<string>("MetaTitle");

                    b.Property<string>("Metaabstract");

                    b.Property<string>("Slug");

                    b.HasKey("UserID", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("TutorSubjects");
                });

            modelBuilder.Entity("Gyanisa.Models.TutorSubjectCategory", b =>
                {
                    b.Property<int>("UserID");

                    b.Property<int>("SubjectCategoryId");

                    b.HasKey("UserID", "SubjectCategoryId");

                    b.HasIndex("SubjectCategoryId");

                    b.ToTable("TutorSubjectCategories");
                });

            modelBuilder.Entity("Gyanisa.Models.UserInformation", b =>
                {
                    b.Property<int>("UserID");

                    b.Property<bool>("Active");

                    b.Property<string>("Add1");

                    b.Property<string>("Add2");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("CvDescription");

                    b.Property<DateTime>("DOB");

                    b.Property<string>("Email");

                    b.Property<string>("Experience");

                    b.Property<string>("FirstName");

                    b.Property<string>("GEducation");

                    b.Property<string>("Gender");

                    b.Property<string>("Heading");

                    b.Property<decimal>("HourlyFee");

                    b.Property<string>("IPAddress");

                    b.Property<bool>("IsAddress");

                    b.Property<bool>("IsBoy");

                    b.Property<bool>("IsCoed");

                    b.Property<bool>("IsEducation");

                    b.Property<bool>("IsEmail");

                    b.Property<bool>("IsGirl");

                    b.Property<bool>("IsHisHome");

                    b.Property<bool>("IsMobile");

                    b.Property<bool>("IsWebCam");

                    b.Property<bool>("IsYourHome");

                    b.Property<string>("LastName");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords");

                    b.Property<string>("MetaTitle");

                    b.Property<string>("Metaabstract");

                    b.Property<string>("MobilePhone");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("PEducation");

                    b.Property<string>("Roles");

                    b.Property<string>("Slug");

                    b.Property<string>("UserPhoto");

                    b.Property<int>("ViewCount");

                    b.Property<string>("Votes");

                    b.Property<string>("ZipCode");

                    b.HasKey("UserID");

                    b.ToTable("UserInformations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Gyanisa.Models.TeacherInquiry", b =>
                {
                    b.HasBaseType("Gyanisa.Models.PostRequire");

                    b.Property<string>("Message");

                    b.Property<int>("UserID");

                    b.HasIndex("UserID");

                    b.ToTable("TeacherInquiry");

                    b.HasDiscriminator().HasValue("TeacherInquiry");
                });

            modelBuilder.Entity("Gyanisa.Models.Admin.TaughtLanguage", b =>
                {
                    b.HasOne("Gyanisa.Models.Admin.Language", "Language")
                        .WithMany("TaughtLanguage")
                        .HasForeignKey("LanguageID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gyanisa.Models.UserInformation", "UserInformation")
                        .WithMany("TaughtLanguages")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gyanisa.Models.Blog.Post", b =>
                {
                    b.HasOne("Gyanisa.Models.Blog.PostGroup", "postGroup")
                        .WithMany()
                        .HasForeignKey("PostGroupID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gyanisa.Models.RatingLogModel", b =>
                {
                    b.HasOne("Gyanisa.Models.UserInformation", "UserInformation")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gyanisa.Models.Subject", b =>
                {
                    b.HasOne("Gyanisa.Models.SubjectCategory", "SubjectCategory")
                        .WithMany()
                        .HasForeignKey("SubjectCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gyanisa.Models.TutorCourse", b =>
                {
                    b.HasOne("Gyanisa.Models.Course", "Course")
                        .WithMany("TutorCourses")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gyanisa.Models.UserInformation", "UserInformation")
                        .WithMany("TutorCourses")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gyanisa.Models.TutorSubject", b =>
                {
                    b.HasOne("Gyanisa.Models.Subject", "Subject")
                        .WithMany("TutorSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gyanisa.Models.UserInformation", "UserInformation")
                        .WithMany("TutorSubjects")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gyanisa.Models.TutorSubjectCategory", b =>
                {
                    b.HasOne("Gyanisa.Models.SubjectCategory", "SubjectCategory")
                        .WithMany("TutorSubjectCategories")
                        .HasForeignKey("SubjectCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gyanisa.Models.UserInformation", "UserInformation")
                        .WithMany("TutorSubjectCategories")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gyanisa.Models.UserInformation", b =>
                {
                    b.HasOne("Gyanisa.Models.ApplicationUser", "User")
                        .WithOne("UserInformation")
                        .HasForeignKey("Gyanisa.Models.UserInformation", "UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Gyanisa.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Gyanisa.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Gyanisa.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Gyanisa.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gyanisa.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Gyanisa.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gyanisa.Models.TeacherInquiry", b =>
                {
                    b.HasOne("Gyanisa.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
